Microsoft (R) Macro Assembler Version 6.11		    11/08/18 10:04:41
dostunes						     Page 1 - 1


				TITLE dostunes

				; dostunes.asm
				; Jason Wilkin
				; Fall 2012

				INCLUDE cs240.inc
			      C .NOLIST
			      C .LIST
			      C 
				.386


 0000				.data
 0000 0002			two WORD 2
 0002 000A			ten SWORD 10
 0004 0001			sign SWORD 1

 0006 01			freqLine BYTE 1 			; Are we reading a note from the file? (or # of beats)

 0007 00			EOF BYTE 0 					; Program is terminated when EOF == 1
 0008 01			FirstLine BYTE 1 			; Helps to get BPM from top of file


 0009 00			currentOctave BYTE 0   		; Hold the current octave
 000A 00			beatDuration BYTE 0  		; Holds number of miliseconds to wait when playing the note
 000B 00			beatsMin BYTE 0 			; BPM
 000C 0000			beatsMili WORD 0   			; Calculated from BPM
 000E 0000			currentIndex WORD 0 		; Index lookup for table of frequencies

				;variables for cmdline PROCs
 0010  00C8 [			cmdlinebuffer BYTE 200 DUP(0)		; Buffer for reading cmd line
        00
       ]
 00D8 00			argc BYTE 0				; For reading call arguments
 00D9  0064 [			argv WORD 100 DUP(0)
        0000
       ]
 01A1 0000			handle WORD ?				; File name
 01A3 00			inArg BYTE ?				; Check for whether or not we are
									; currently in an argument when
									; reading in args




 01A4 41 6E 20 6F 70 65		openError BYTE "An open error has occurred. Please check file.",0
       6E 20 65 72 72 6F
       72 20 68 61 73 20
       6F 63 63 75 72 72
       65 64 2E 20 50 6C
       65 61 73 65 20 63
       68 65 63 6B 20 66
       69 6C 65 2E 00
 01D3 4E 6F 20 66 69 6C		fileError BYTE "No file was specified. Please supply a file name in the call to dostunes.",0
       65 20 77 61 73 20
       73 70 65 63 69 66
       69 65 64 2E 20 50
       6C 65 61 73 65 20
       73 75 70 70 6C 79
       20 61 20 66 69 6C
       65 20 6E 61 6D 65
       20 69 6E 20 74 68
       65 20 63 61 6C 6C
       20 74 6F 20 64 6F
       73 74 75 6E 65 73
       2E 00
 021D 41 20 72 65 61 64		readError BYTE "A read error has occurred. Please check file.",0
       20 65 72 72 6F 72
       20 68 61 73 20 6F
       63 63 75 72 72 65
       64 2E 20 50 6C 65
       61 73 65 20 63 68
       65 63 6B 20 66 69
       6C 65 2E 00
 024B 41 6E 20 65 72 72		searchError BYTE "An error occured while searching table.",0
       6F 72 20 6F 63 63
       75 72 65 64 20 77
       68 69 6C 65 20 73
       65 61 72 63 68 69
       6E 67 20 74 61 62
       6C 65 2E 00


 0273  000A [			lineBuff BYTE 10 DUP(0) 			; Buffer used when reading file
        00
       ]
 027D  000A [			garbageBuff BYTE 10 DUP(0)			; Garbage buffer for extra unnessary bytes (CR and newline bytes)
        00
       ]

				; Holds indicies for lookup in frequency table
 0287 43 6E 30 30 43 23		table BYTE "Cn00C#01Db01Dn02D#03Eb03En04Fn05F#06Gb06Gn07G#08Ab08An09A#10Bb10Bn11rr12Z",0
       30 31 44 62 30 31
       44 6E 30 32 44 23
       30 33 45 62 30 33
       45 6E 30 34 46 6E
       30 35 46 23 30 36
       47 62 30 36 47 6E
       30 37 47 23 30 38
       41 62 30 38 41 6E
       30 39 41 23 31 30
       42 62 31 30 42 6E
       31 31 72 72 31 32
       5A 00


				; http://www.phy.mtu.edu/~suits/notefreqs.html
 02D1				MYSCALE LABEL DWORD
 02D1  00033194			DWORD 209300 ; C 7
 02D5  00036232			DWORD 221746 ; C#7/Db7
 02D9  000395B4			DWORD 234932 ; D 7
 02DD  0003CC46			DWORD 248902 ; D#7/Eb7
 02E1  00040616			DWORD 263702 ; E 7
 02E5  00044357			DWORD 279383 ; F 7
 02E9  0004843C			DWORD 295996 ; F#7/Gb7
 02ED  0004C8FC			DWORD 313596 ; G 7
 02F1  000511D4			DWORD 332244 ; G#7/Ab7
 02F5  00055F00			DWORD 352000 ; A 7
 02F9  0005B0C3			DWORD 372931 ; A#7/Bb7
 02FD  00060763			DWORD 395107 ; B 7
 0301  00000000			DWORD 000000 ; Rest

 0000				.code
 0000 00000000			Orig08 DWORD ?
 0004  0004 [			Time WORD 4 DUP(?)
        0000
       ]
 000C 00000064			HUNDRED DWORD 100
 0010 0000			COUNTER WORD 0
 0012 00123540			CLOCKSPEED DWORD 1193280
 0016 30 31 32 33 34 35		hex BYTE "0123456789ABCDEF"
       36 37 38 39 41 42
       43 44 45 46
 0026 01			running BYTE 1
 0027 0006			octave WORD 6




 0029				parseInt PROC
				; IN: bx points to a ASCIZ string
				; 	containing the characters of a signed decimal number
				;	example bx->'7','8','3',0
				; OUT: ax contains the integer, in this example, 783 (030Fh)
				;      if this number is too large or too small to fit a word,
				;      ax is unspecified, and the overflow flag is set.

 0029  53				push bx
 002A  51				push cx
 002B  52				push dx			; dx saved/restored because imul uses it.
 002C  33 C0				xor ax,ax		; clear ax and overflow flag
 002E				pre:
 002E  80 3F 2D				cmp BYTE PTR [bx],'-'	; are we negative?  :-) :-)
 0031  75 07				jnz top
 0033  C7 06 0004 R FFFF		mov sign,-1		; negative!
 0039  43				inc bx
 003A  B5 00			top:	mov ch,0		; clear high bits of cx
 003C  8A 0F				mov cl,[bx]		; get the next character
 003E  80 F9 00				cmp cl,0		; are we done?
 0041  74 19				jz done
 0043  80 E9 30				sub cl,'0'		; turn the digit to a number in 0..9
					; negate the digit if needed
 0046  83 3E 0004 R 01			cmp sign,1
 004B  74 02				jz pos
					; negate cx!!
 004D  F7 D9				neg cx
 004F  F7 2E 0002 R		pos:	imul ten
 0053  70 07				jo done			; quit if overflow
 0055  03 C1				add ax,cx		; add the number
 0057  70 03				jo done			; quit if overflow (again)
 0059  43				inc bx			; go to next character in the string
 005A  EB DE				jmp top
 005C				done:
 005C  5A				pop dx			; restore registers
 005D  59				pop cx
 005E  5B				pop bx
 005F  C3				ret
 0060				parseInt ENDP


 0060				S_On PROC
				; Turns the speaker on
 0060  50				push	ax

 0061  E4 61				in	al, 97
 0063  0C 03				or	al, 3
 0065  E6 61				out	97, al

 0067  58				pop	ax
 0068  C3				ret
 0069				S_On ENDP

 0069				S_Off PROC
				; Turns the speaker off
 0069  50				push	ax
 006A  E4 61				in	al, 97
 006C  24 FC				and 	al, 0fch
 006E  E6 61				out	97, al
 0070  58				pop	ax
 0071  C3				ret
 0072				S_Off ENDP

 0072				SetClockCount PROC
				; IN: AX a count to set on the clock
 0072  50				push	ax
 0073  51				push	cx

 0074  8B C8				mov	cx, ax
 0076  B0 B6				mov	al, 182
 0078  E6 43				out	67, al	; tell timer to accept a new count
 007A  8B C1				mov	ax, cx

 007C  E6 42				out	66, al
 007E  8A C4				mov	al, ah
 0080  E6 42				out	66, al

 0082  59				pop	cx
 0083  58				pop	ax
 0084  C3				ret
 0085				SetClockCount ENDP

 0085				SetFreq	PROC
 0085  55				push	bp
 0086  8B EC				mov	bp,sp

 0088  50				push 	ax
 0089  53				push 	bx
 008A  52				push	dx

					;;  set ax to clockspeed divided by frequency
 008B  66| 2E: A1 0012 R		mov	eax,cs:CLOCKSPEED
 0090  66| BA 00000000			mov	edx, 0
 0096  66| BB 00000000			mov	ebx, 0
 009C  8B 5E 04				mov	bx, [bp+4]	; sets bx to the desired frequency
 009F  66| F7 F3			div	ebx		; divide to get count in ax

					;; and call SetClockCount
 00A2  E8 FFCD				call SetClockCount

 00A5  5A				pop dx
 00A6  5B				pop bx
 00A7  58				pop ax

 00A8  8B E5				mov sp,bp
 00AA  5D				pop bp
 00AB  C2 0002				ret 2
 00AE				SetFreq ENDP


 00AE				adjustOctave PROC
					; IN: eax in centihertz
					; divide by two (7-cs:octave) times

 00AE  51				push cx
 00AF  53				push bx
 00B0  B9 0007				mov cx, 7
 00B3  BB 0009 R			mov bx,OFFSET currentOctave
 00B6  2B 0F				sub cx, [bx]
 00B8  66| D3 E8			shr eax, cl
 00BB  5B				pop bx
 00BC  59				pop cx
 00BD  C3				ret

 00BE				adjustOctave ENDP


 00BE				readCMDLine PROC
				; IN:	Nothing
				; OUT:	cmdlinebuffer contains the arguments (unparsed)

 00BE  9C				pushf			; Save regs
 00BF  51				push cx
 00C0  52				push dx
 00C1  56				push si
 00C2  57				push di

 00C3  BE 0082				mov si,82h		; start of actual command line
 00C6  BF 0010 R			mov di,OFFSET cmdlinebuffer	; destination setup
 00C9  B9 0000				mov cx,0
 00CC  26: 8A 0E 0080			mov cl,es:[80h]		; cx: number of chars in command line
 00D1  83 F9 00				cmp cx,0		; if no command line args at all...
 00D4  74 10				jz done			; don't do anything at all
 00D6  49				dec cx			; otherwise skip first space and proceed
 00D7  83 F9 00			again:  cmp cx,0
 00DA  74 0A				jz done
 00DC  26: 8A 14			mov dl,es:[si]		; copy one char from PSP
 00DF  88 15				mov [di],dl		; to my buffer
 00E1  47				inc di			; increment the pointers
 00E2  46				inc si
 00E3  49				dec cx
 00E4  EB F1				jmp again
 00E6  C6 05 00			done:	mov BYTE PTR [di],0	; null-terminate the whole thing!
 00E9  5F				pop di			; Restore regs
 00EA  5E				pop si
 00EB  5A				pop dx
 00EC  59				pop cx
 00ED  9D				popf
 00EE  C3				ret
 00EF				readCMDLine ENDP


 00EF				parseCMDLine PROC
				; IN:	cmdlinebuffer contains the unparsed arguments
				; OUT:	Args in cmdlinebuffer are parsed and null-terminated
 00EF  9C				pushf
 00F0  52				push dx
 00F1  56				push si
 00F2  57				push di

 00F3  C6 06 01A3 R 00			mov inArg,0
 00F8  BE 0010 R			mov si, OFFSET cmdlinebuffer	; pointer into buffer
 00FB  BF 00D9 R			mov di, OFFSET argv	; pointer into argv
 00FE  C6 06 00D8 R 00			mov argc, 0
 0103				again:
 0103  8A 14				mov dl,[si]	 ; load next char from buffer
 0105  80 FA 00				cmp dl,0	 ; is this the end?
 0108  74 27				jz finished
							; no
 010A  80 FA 20				cmp dl,' '
 010D  74 17				jz space

					;-- handle non-space
 010F  80 3E 01A3 R 01			cmp inArg,1		; are we already in an argument
 0114  74 18				jz continue
 0116  FE 06 00D8 R			inc argc		; no.. new arg!  yay!!
 011A  89 35				mov [di],si		; store starting location
 011C  83 C7 02				add di,2
 011F  C6 06 01A3 R 01			mov inArg,1
 0124  EB 08				jmp continue

 0126				space:	;-- handle space
 0126  C6 06 01A3 R 00			mov inArg,0		; no longer in an argument
 012B  C6 04 00				mov BYTE PTR [si],0	; null terminate
 012E				continue:
 012E  46				inc si			; go to next character
 012F  EB D2				jmp again		; and repeat
 0131				finished:
 0131  5F				pop di
 0132  5E				pop si
 0133  5A				pop dx
 0134  9D				popf
 0135  C3				ret
 0136				parseCMDLine ENDP


 0136				Getline PROC
				; Reads a line of a Note/Octave or number of beats to be played
 0136  9C				pushf

 0137  53				push bx
 0138  BB 0006 R			mov bx,OFFSET freqLine
 013B  8B 0F				mov cx,[bx]
				;	call DumpRegs
 013D  5B				pop bx


 013E  80 3E 0006 R 01			cmp freqLine,1
 0143  74 05				jz onFreqLine		; Looking at a note line (reading 5 chars)
 0145  B9 0003				mov cx,3 			; Looking at a beat line (reading 3 chars)
 0148  EB 03				jmp read

 014A				onFreqLine:
 014A  B9 0005				mov cx,5

 014D				read:
 014D  B4 3F				mov ah,3Fh 			; Read in the appropriate number of chars
 014F  CD 21				int 21h
 0151  72 1D				jc badr 			; Handle a read error

 0153  80 3E 0006 R 01			cmp freqLine,1
 0158  74 02				jz endCheck
 015A  EB 05				jmp continue
 015C				endCheck:
 015C  83 F8 05				cmp ax,5 			; Have we read the correct number of chars?...
 015F  74 1C				jz done


 0161				continue:
 0161  83 F8 03				cmp ax,3
 0164  74 17				jz done
										; ...if not, need to close file, cleanup
 0166  53				push bx
 0167  BB 0007 R			mov bx,OFFSET EOF		; End of file, prepare to stop reading
 016A  C6 07 01				mov BYTE PTR [bx],1
 016D  5B				pop bx
 016E  EB 0D				jmp done


 0170				badr:
 0170  66| 52				push edx
 0172  66| BA 0000021D R		mov edx, OFFSET readError 		; Output error message
 0178  E8 0000 E			call WriteString
 017B  66| 5A				pop edx

 017D				done:
 017D  9D				popf
 017E  C3				ret
 017F				Getline ENDP

 017F				SearchStr PROC
				; Searches the table of indicies for the appropriate index into the table of frequencies
 017F  9C				pushf
 0180  50				push ax
 0181  53				push bx
 0182  51				push cx
 0183  56				push si


 0184  BB 0287 R			mov bx,OFFSET table 		; bx points to the table of indicies
 0187  BE 0273 R			mov si,OFFSET lineBuff		; si points to a buffer containing the note (as a string)

 018A				top:

 018A  80 3F 5A				cmp BYTE PTR [bx],'Z' 		; Reached end of table, note not found
 018D  74 39				jz error


 018F  66| B8 00000000			mov eax,0 					; Clear eax
 0195  8A 07				mov al, BYTE PTR [bx] 		; mov first char of note and table into
 0197  8A 0C				mov cl,BYTE PTR [si] 		; registers to compare
 0199  38 C1				cmp cl,al
 019B  74 05				jz continue 				; If they match, check for natural/sharp/flat (n/#/b)
 019D  83 C3 04				add bx,4 					; Otherwise, move bx to next note in table
 01A0  EB E8				jmp top

 01A2				continue:
 01A2  8A 47 01				mov al,BYTE PTR [bx+1] 		; Compare for natural/sharp/flat (n/#/b)
 01A5  8A 4C 01				mov cl,BYTE PTR [si+1]
 01A8  38 C8				cmp al,cl
 01AA  74 05				jz match 					; Found it!
 01AC  83 C3 04				add bx,4 					; Otherwise, move on to next note in table
 01AF  EB D9				jmp top

 01B1				match:
 01B1  8A 6F 02				mov ch,BYTE PTR [bx+2] 		; Move index to cx
 01B4  8A 4F 03				mov cl,BYTE PTR [bx+3]

 01B7  B8 0000				mov ax,0
 01BA  80 E9 30				sub cl,'0' 					; Convert string to int
 01BD  8A C1				mov al,cl 					; and move it into al

 01BF  80 FD 30				cmp ch,'0' 					; If index < 10, we're done
 01C2  74 11				jz done

 01C4  04 0A				add al,10 					; Otherwise, add 10 to al
 01C6  EB 0D				jmp done


 01C8				error:
 01C8  66| 52				push edx
 01CA  66| BA 0000024B R		mov edx,OFFSET searchError 	; Output error message if note is not in table
 01D0  E8 0000 E			call WriteString
 01D3  66| 5A				pop edx

 01D5				done:
 01D5  BB 000E R			mov bx,OFFSET currentIndex 	; Move the index into currentIndex
 01D8  88 07				mov [bx],al
 01DA				done2:

 01DA  5E				pop si
 01DB  5B				pop bx
 01DC  59				pop cx
 01DD  58				pop ax
 01DE  9D				popf
 01DF  C3				ret
 01E0				SearchStr ENDP



 01E0				GetBPM PROC
				; Reads in BPM from the top of the file and converts it to a integer
 01E0  9C				pushf
 01E1  66| 50				push eax
 01E3  66| 53				push ebx
 01E5  66| 51				push ecx
 01E7  66| 52				push edx


 01E9  BA 0273 R			mov dx,OFFSET lineBuff
 01EC  B9 0006				mov cx,6 						; Reads in BPM
 01EF  B4 3F				mov ah,3Fh
 01F1  CD 21				int 21h

 01F3  B9 0000				mov cx,0
 01F6  BB 0008 R			mov bx,OFFSET FirstLine
 01F9  C6 07 00				mov BYTE PTR [bx],0 			; We are no longer reading the first line
 01FC  BB 0273 R			mov bx,OFFSET lineBuff
 01FF				BPM:
 01FF  80 3F 30				cmp BYTE PTR [bx],'0' 			; Have we reached the end of the BPM yet?
 0202  73 2B				jae moveOn 						; If not, increment to find next chars
 0204  C6 07 00				mov BYTE PTR [bx],0 			; If yes, null terminate

 0207  BB 0273 R			mov bx,OFFSET lineBuff			; Prepare to convert str to int
 020A  66| B8 00000000			mov eax,0
 0210  E8 FE16				call parseInt
 0213  BB 000B R			mov bx,OFFSET beatsMin
 0216  89 07				mov [bx],ax 					; Store BPM in beatsMin

 0218  83 F9 02				cmp cx,2 						; Do we need to read in an extra CR char?
 021B  77 02				ja extraRead
 021D  EB 14				jmp done

 021F				extraRead:
 021F  8B 1E 01A1 R			mov bx,handle
 0223  BA 0273 R			mov dx, OFFSET lineBuff
 0226  B9 0001				mov cx,1 			; accounts for extra CR character
 0229  B4 3F				mov ah,3Fh
 022B  CD 21				int 21h
 022D  EB 04				jmp done

 022F				moveOn:						; Not done processing BPM
 022F  43				inc bx 					; Advance pointer to lineBuff
 0230  41				inc cx 					; Count how many chars are in BPM
 0231  EB CC				jmp BPM


 0233				done:

 0233  66| 5A				pop edx
 0235  66| 59				pop ecx
 0237  66| 5B				pop ebx
 0239  66| 58				pop eax
 023B  9D				popf
 023C  C3				ret
 023D				GetBPM ENDP

 023D				GarbageRead PROC
 023D  9C				pushf
 023E  50				push ax
 023F  53				push bx
 0240  51				push cx
 0241  52				push dx


 0242  BA 027D R			mov dx, OFFSET garbageBuff 		; Setup read with appropriate parameters
 0245  8B 1E 01A1 R			mov bx, handle
 0249  B9 0001				mov cx, 1

 024C  B4 3F				mov ah,3Fh 			; Read in one byte
 024E  CD 21				int 21h

 0250  5A				pop dx
 0251  59				pop cx
 0252  5B				pop bx
 0253  58				pop ax
 0254  9D				popf
 0255  C3				ret
 0256				GarbageRead ENDP


 0256				CalcBeatTime PROC
				; Calculates the Beats per millisecond
 0256  9C				pushf
 0257  66| 50				push eax
 0259  66| 53				push ebx
 025B  66| 51				push ecx
 025D  66| 52				push edx

 025F  66| BA 00000000			mov edx,0 					; Clear edx, eax
 0265  66| B8 00000000			mov eax,0

 026B  BB 000B R			mov bx, OFFSET beatsMin
 026E  8B 07				mov ax,[bx] 				; Move BPM into ax




				;   --------- Comment these lines when virtualizing with a faster CPU -----------
				;	mov cx,4
				;	mul cx 						; Multiply by 4 (adjust to run on slower machines)
				;   ------------------------------------------------------------------------------


 0270  8B C8				mov cx,ax
 0272  B8 EA60				mov ax,60000
 0275  F7 F1				div cx 						; (BPM * 4) / 60000 = Beats per millisecond

 0277  BB 000C R			mov bx, OFFSET beatsMili
 027A  89 07				mov [bx],ax 				; Store in beatsMili

 027C  66| 5A				pop edx
 027E  66| 59				pop ecx
 0280  66| 5B				pop ebx
 0282  66| 58				pop eax
 0284  9D				popf
 0285  C3				ret
 0286				CalcBeatTime ENDP


 0286				Delay PROC
				;*********************************************************************
				; cx is number of milliseconds
				; return after that number of milliseconds
				;*********************************************************************
 0286  51				push cx		; save registers
 0287  53				push bx
 0288  52				push dx
 0289  9C				pushf

 028A  BB 000A				mov bx,10	; we need to div by 1000
 028D  BA 0000				mov dx,0	; clear dx
 0290  F7 F3				div bx		; to get ax into seconds

 0292  83 F8 00				cmp ax,0	; if 0
 0295  74 28				jz done		; don't do anything

 0297  50				push ax		; save ax
 0298  B4 2C				mov ah,2Ch	; set DOS function 2C (get system time)
 029A  CD 21				int 21h		; get current time (ch=hr,cl=min,dh=sec,dl=csec)
 029C  58				pop ax		; restore ax

 029D  8A FA				mov bh,dl	; storing current csec in bh

 029F  50			top:	push ax		; saving ax
 02A0  B4 2C				mov ah,2Ch	; DOS function get system time
 02A2  CD 21				int 21h		; get system time
 02A4  58				pop ax		; restore ax
 02A5  38 D7			pass:	cmp bh,dl	; see if csec is still the same
 02A7  74 F6				jz top		; if same, get time again
 02A9  8A DA				mov bl,dl	; otherwise, store new time
 02AB  7C 03				jl less		; if bh is less, a new second has no occured
 02AD  80 C2 64				add dl,100	; if bh is more, we need to add 100 (carry)
 02B0  2A D7			less:	sub dl,bh	; get difference in dl
 02B2  B6 00				mov dh,0	; clear dh
 02B4  2B C2				sub ax,dx	; subtract that time from ax
 02B6  8A FB				mov bh,bl	; store new time in bh
 02B8  83 F8 00				cmp ax,0	; see if ax is now 0
 02BB  7E 02				jle done	; if yeah, we are done
 02BD  EB E0				jmp top		; if not DO IT AGAIN!!!

 02BF  9D			done:	popf		; restore regs
 02C0  5A				pop dx
 02C1  5B				pop bx
 02C2  59				pop cx
 02C3  C3				ret		; RETURN!!!
 02C4				Delay ENDP
				;------------------------------------------------------------------------
				; Main Program
				;------------------------------------------------------------------------

 02C4				main PROC
 02C4  B8 ---- R			mov	ax,@data
 02C7  8E D8				mov	ds,ax

					;-- get command line stuff
 02C9  E8 FDF2				call readCMDLine
 02CC  E8 FE20				call parseCMDLine

					;-- do we have a file?
 02CF  80 3E 00D8 R 00			cmp argc,0
 02D4  0F 84 00E6			jz nofile

					;-- open the file for reading
 02D8  B0 00				mov al,0			; file mode is read
 02DA  B4 3D				mov ah,3Dh			; open file code
 02DC  8B 16 00D9 R			mov dx, argv[0]			; the file name  (is the first arg)
 02E0  CD 21				int 21h
 02E2  0F 82 00CD			jc bado				; handle error on open
 02E6  A3 01A1 R			mov handle,ax			; store the file handle in memory


 02E9  8B 1E 01A1 R			mov bx,handle
 02ED  E8 FEF0				call GetBPM 				; Read and process BPM
 02F0  E8 FF63				call CalcBeatTime 			; Convert to miliseconds
 02F3				mytop:
 02F3  BA 0273 R			mov dx,OFFSET lineBuff
 02F6  E8 FE3D				call Getline 				; Reads a line from the file
 02F9  E8 0000 E			call WriteString 			; Writes the line to the screen

 02FC				checkEOF:
 02FC  80 3E 0007 R 01			cmp EOF,1 					; Have we reached end of file?
 0301  0F 84 00C4			jz cleanup


 0305  BE 0273 R			mov si,OFFSET lineBuff
 0308  80 3E 0006 R 01			cmp freqLine,1
 030D  0F 84 0086			jz freqNull


					;-- BEAT LINE
 0311  53				push bx
 0312  8B DE				mov bx,si
 0314  43				inc bx
 0315				readBeat:
 0315  80 3F 30				cmp BYTE PTR [bx],'0'
 0318  73 05				jae extraBeat
 031A  C6 07 00				mov BYTE PTR [bx],0
 031D  EB 06				jmp procBeat


 031F				extraBeat:
 031F  43				inc bx
 0320  E8 FF1A				call GarbageRead
 0323  EB F0				jmp readBeat


 0325				procBeat:
 0325  BB 0006 R			mov bx,OFFSET freqLine 		; Switch freqLine back to 1 for next read
 0328  C6 07 01				mov BYTE PTR [bx],1

 032B  BB 0273 R			mov bx,OFFSET lineBuff
 032E  E8 FCF8				call parseInt 				; Convert number of beats from str to int
 0331  BB 000A R			mov bx,OFFSET beatDuration
 0334  89 07				mov [bx],ax 				; Store beats in beatDuration


 0336  BB 000E R			mov bx,OFFSET currentIndex
 0339  8B 3F				mov di,[bx] 				; Get the index into the freq table
 033B  C1 E7 02				shl di,2 					; index ^ 4 (to navigate through DWORDs)

 033E  66| B8 00000000			mov eax,0
 0344  66| 8B 85 02D1 R			mov eax,[MYSCALE+di] 		; Move frequency into eax
 0349  5B				pop bx

 034A  66| 83 F8 00			cmp eax,0 					; If frequency is 0, need to rest
 034E  74 33				jz resting

 0350  E8 FD5B				call adjustOctave 			; Adjust to the correct octave

 0353  66| BA 00000000			mov edx,0 					; Clear edx
 0359  66| 2E: F7 36 000C R		div cs:HUNDRED 				; Divide frequency by 100 for SetFreq

 035F  50				push ax
 0360  E8 FD22				call SetFreq 				; Set the appropriate frequency
 0363  E8 FCFA				call S_On 					; Turn the speaker on

 0366  53				push bx
 0367  66| B8 00000000			mov eax,0
 036D  BB 000C R			mov bx,OFFSET beatsMili
 0370  8B 07				mov ax,[bx]
 0372  BB 000A R			mov bx,OFFSET beatDuration
 0375  8B 0F				mov cx,[bx]
 0377  F7 E1				mul cx 			 	; Prepare to delay for:
										; beatsMili (BPMillisecond) * beatDuration (BPM)
 0379  E8 FF0A				call Delay
 037C  E8 FCEA				call S_Off 			; Turn speaker off after waiting the appropriate amount of time
 037F  5B				pop bx
 0380  E9 FF70				jmp mytop 			; Read the next line

 0383				resting:
 0383  53				push bx
 0384  BB 000C R			mov bx,OFFSET beatsMili
 0387  8B 07				mov ax,[bx]
 0389  BB 000A R			mov bx,OFFSET beatDuration
 038C  8B 0F				mov cx,[bx]
 038E  F7 E1				mul cx 				; Prepare to delay/rest for:
										; beatsMili (BPMillisecond) * beatDuration (BPM)
 0390  E8 FEF3				call Delay
 0393  5B				pop bx
 0394  E9 FF5C				jmp mytop 			; Read the next line


					;-- NOTE LINE
 0397				freqNull:
 0397  83 C6 02				add si,2 					; si now points to the octave
 039A  C6 44 01 00			mov BYTE PTR [si+1],0 		; Null terminate to prepare for conversion
 039E  8B DE				mov bx,si
 03A0  E8 FC86				call parseInt 				; Convert octave str to int

 03A3  BB 0009 R			mov bx,OFFSET currentOctave
 03A6  89 07				mov [bx],ax 				; Move octave into currentOctave


 03A8  E8 FDD4				call SearchStr 				; Find the index into the freq table for this note
 03AB  C6 06 0006 R 00			mov freqLine,0 				; Prepare to read in beats
 03B0  E9 FF40				jmp mytop


 03B3				bado:
 03B3  66| BA 000001A4 R		mov edx,OFFSET openError 	; Output open error message
 03B9  E8 0000 E			call WriteString
 03BC  EB 13				jmp done


 03BE				nofile:
 03BE  66| BA 000001D3 R		mov edx,OFFSET fileError 	; Output file error message
 03C4  E8 0000 E			call WriteString
 03C7  EB 08				jmp done

 03C9				cleanup:
 03C9  8B 1E 01A1 R			mov bx,handle
 03CD  B4 3E				mov ah,3Eh		; Close the file
 03CF  CD 21				int 21h

 03D1				done:
 03D1  B8 4C00				mov ax,4C00h
 03D4  CD 21				int 21h
 03D6				main ENDP
				END main
Microsoft (R) Macro Assembler Version 6.11		    11/08/18 10:04:41
dostunes						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0305	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 03D6	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CalcBeatTime . . . . . . . . . .	P Near	 0256	  _TEXT	Length= 0030 Public STDCALL
Delay  . . . . . . . . . . . . .	P Near	 0286	  _TEXT	Length= 003E Public STDCALL
  top  . . . . . . . . . . . . .	L Near	 029F	  _TEXT	
  pass . . . . . . . . . . . . .	L Near	 02A5	  _TEXT	
  less . . . . . . . . . . . . .	L Near	 02B0	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 02BF	  _TEXT	
DumpLongRegs . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GarbageRead  . . . . . . . . . .	P Near	 023D	  _TEXT	Length= 0019 Public STDCALL
GetBPM . . . . . . . . . . . . .	P Near	 01E0	  _TEXT	Length= 005D Public STDCALL
  BPM  . . . . . . . . . . . . .	L Near	 01FF	  _TEXT	
  extraRead  . . . . . . . . . .	L Near	 021F	  _TEXT	
  moveOn . . . . . . . . . . . .	L Near	 022F	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0233	  _TEXT	
Getline  . . . . . . . . . . . .	P Near	 0136	  _TEXT	Length= 0049 Public STDCALL
  onFreqLine . . . . . . . . . .	L Near	 014A	  _TEXT	
  read . . . . . . . . . . . . .	L Near	 014D	  _TEXT	
  endCheck . . . . . . . . . . .	L Near	 015C	  _TEXT	
  continue . . . . . . . . . . .	L Near	 0161	  _TEXT	
  badr . . . . . . . . . . . . .	L Near	 0170	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 017D	  _TEXT	
NewLine  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
PrintVersion . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadHexByte  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadHexDigit . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadHexWord  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadLine . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
S_Off  . . . . . . . . . . . . .	P Near	 0069	  _TEXT	Length= 0009 Public STDCALL
S_On . . . . . . . . . . . . . .	P Near	 0060	  _TEXT	Length= 0009 Public STDCALL
SearchStr  . . . . . . . . . . .	P Near	 017F	  _TEXT	Length= 0061 Public STDCALL
  top  . . . . . . . . . . . . .	L Near	 018A	  _TEXT	
  continue . . . . . . . . . . .	L Near	 01A2	  _TEXT	
  match  . . . . . . . . . . . .	L Near	 01B1	  _TEXT	
  error  . . . . . . . . . . . .	L Near	 01C8	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 01D5	  _TEXT	
  done2  . . . . . . . . . . . .	L Near	 01DA	  _TEXT	
SetClockCount  . . . . . . . . .	P Near	 0072	  _TEXT	Length= 0013 Public STDCALL
SetFreq  . . . . . . . . . . . .	P Near	 0085	  _TEXT	Length= 0029 Public STDCALL
SkipToEOL  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
TraceRegisterChanges . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Version  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBit . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHexByte . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHexDigit  . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHexLong . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHexWord . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteUInt  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
adjustOctave . . . . . . . . . .	P Near	 00AE	  _TEXT	Length= 0010 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 02C4	  _TEXT	Length= 0112 Public STDCALL
  mytop  . . . . . . . . . . . .	L Near	 02F3	  _TEXT	
  checkEOF . . . . . . . . . . .	L Near	 02FC	  _TEXT	
  readBeat . . . . . . . . . . .	L Near	 0315	  _TEXT	
  extraBeat  . . . . . . . . . .	L Near	 031F	  _TEXT	
  procBeat . . . . . . . . . . .	L Near	 0325	  _TEXT	
  resting  . . . . . . . . . . .	L Near	 0383	  _TEXT	
  freqNull . . . . . . . . . . .	L Near	 0397	  _TEXT	
  bado . . . . . . . . . . . . .	L Near	 03B3	  _TEXT	
  nofile . . . . . . . . . . . .	L Near	 03BE	  _TEXT	
  cleanup  . . . . . . . . . . .	L Near	 03C9	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 03D1	  _TEXT	
parseCMDLine . . . . . . . . . .	P Near	 00EF	  _TEXT	Length= 0047 Public STDCALL
  again  . . . . . . . . . . . .	L Near	 0103	  _TEXT	
  space  . . . . . . . . . . . .	L Near	 0126	  _TEXT	
  continue . . . . . . . . . . .	L Near	 012E	  _TEXT	
  finished . . . . . . . . . . .	L Near	 0131	  _TEXT	
parseInt . . . . . . . . . . . .	P Near	 0029	  _TEXT	Length= 0037 Public STDCALL
  pre  . . . . . . . . . . . . .	L Near	 002E	  _TEXT	
  top  . . . . . . . . . . . . .	L Near	 003A	  _TEXT	
  pos  . . . . . . . . . . . . .	L Near	 004F	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 005C	  _TEXT	
readCMDLine  . . . . . . . . . .	P Near	 00BE	  _TEXT	Length= 0031 Public STDCALL
  again  . . . . . . . . . . . .	L Near	 00D7	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 00E6	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0003h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
CLOCKSPEED . . . . . . . . . . .	DWord	 0012	  _TEXT	
COUNTER  . . . . . . . . . . . .	Word	 0010	  _TEXT	
EOF  . . . . . . . . . . . . . .	Byte	 0007	  _DATA	
FirstLine  . . . . . . . . . . .	Byte	 0008	  _DATA	
HUNDRED  . . . . . . . . . . . .	DWord	 000C	  _TEXT	
MYSCALE  . . . . . . . . . . . .	DWord	 02D1	  _DATA	
Orig08 . . . . . . . . . . . . .	DWord	 0000	  _TEXT	
Time . . . . . . . . . . . . . .	Word	 0004	  _TEXT	
argc . . . . . . . . . . . . . .	Byte	 00D8	  _DATA	
argv . . . . . . . . . . . . . .	Word	 00D9	  _DATA	
beatDuration . . . . . . . . . .	Byte	 000A	  _DATA	
beatsMili  . . . . . . . . . . .	Word	 000C	  _DATA	
beatsMin . . . . . . . . . . . .	Byte	 000B	  _DATA	
cmdlinebuffer  . . . . . . . . .	Byte	 0010	  _DATA	
currentIndex . . . . . . . . . .	Word	 000E	  _DATA	
currentOctave  . . . . . . . . .	Byte	 0009	  _DATA	
fileError  . . . . . . . . . . .	Byte	 01D3	  _DATA	
freqLine . . . . . . . . . . . .	Byte	 0006	  _DATA	
garbageBuff  . . . . . . . . . .	Byte	 027D	  _DATA	
handle . . . . . . . . . . . . .	Word	 01A1	  _DATA	
hex  . . . . . . . . . . . . . .	Byte	 0016	  _TEXT	
inArg  . . . . . . . . . . . . .	Byte	 01A3	  _DATA	
lineBuff . . . . . . . . . . . .	Byte	 0273	  _DATA	
octave . . . . . . . . . . . . .	Word	 0027	  _TEXT	
openError  . . . . . . . . . . .	Byte	 01A4	  _DATA	
readError  . . . . . . . . . . .	Byte	 021D	  _DATA	
running  . . . . . . . . . . . .	Byte	 0026	  _TEXT	
searchError  . . . . . . . . . .	Byte	 024B	  _DATA	
sign . . . . . . . . . . . . . .	Word	 0004	  _DATA	
table  . . . . . . . . . . . . .	Byte	 0287	  _DATA	
ten  . . . . . . . . . . . . . .	Word	 0002	  _DATA	
two  . . . . . . . . . . . . . .	Word	 0000	  _DATA	

	   0 Warnings
	   0 Errors
